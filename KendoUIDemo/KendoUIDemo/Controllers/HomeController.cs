using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using Kendo.Mvc.Extensions;
using Kendo.Mvc.UI;
using KendoUIDemo.Models;
using KendoUIDemo.ViewModels;

namespace KendoUIDemo.Controllers
{
    public class HomeController : Controller
    {
        public ActionResult Index()
        {
            var context = new AWEntities();
            var viewModel = context
                .Product
                .Select(p =>
                    new ProductViewModel
                    {
                       ProductId = p.ProductID,
                       ProductName = p.Name,
                       Color = p.Color,
                        ModelId = p.ProductModelID
                    });
            return View(viewModel);
        }

        public ActionResult Products_Read([DataSourceRequest]DataSourceRequest request)
        {
            using (var context = new AWEntities())
            {
                IQueryable<Product> products = context.Product;
                DataSourceResult result = products.ToDataSourceResult(request);
                return Json(result, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult Products_Create([DataSourceRequest]DataSourceRequest request, ProductViewModel product)
        {
            if (ModelState.IsValid)
            {
                using (var context = new AWEntities())
                {
                    // Create a new Product entity and set its properties from the posted ProductViewModel.
                    var entity = new Product()
                    {
                        Name = product.ProductName,
                        ProductID = product.ProductId
                    };
                    // Add the entity.
                    context.Product.Add(entity);
                    // Insert the entity in the database.
                    context.SaveChanges();
                    // Get the ProductID generated by the database.
                    product.ProductId = entity.ProductID;
                }
            }
            // Return the inserted product. The grid needs the generated ProductID. Also return any validation errors.
            return Json(new[] { product }.ToDataSourceResult(request, ModelState));
        }

        public ActionResult Products_Update([DataSourceRequest]DataSourceRequest request, ProductViewModel product)
        {
            if (ModelState.IsValid)
            {
                using (var context = new AWEntities())
                {
                    // Create a new Product entity and set its properties from the posted ProductViewModel.
                    var entity = new Product
                    {
                        ProductID = product.ProductId,
                        Name = product.ProductName,
                    };
                    // Attach the entity.
                    context.Product.Attach(entity);
                    // Change its state to Modified so Entity Framework can update the existing product instead of creating a new one.
                    context.Entry(entity).State = EntityState.Modified;
                    // Or use ObjectStateManager if using a previous version of Entity Framework.
                    // northwind.ObjectStateManager.ChangeObjectState(entity, EntityState.Modified);
                    // Update the entity in the database.
                    context.SaveChanges();
                }
            }
            // Return the updated product. Also return any validation errors.
            return Json(new[] { product }.ToDataSourceResult(request, ModelState));
        }

        public ActionResult Products_Destroy([DataSourceRequest]DataSourceRequest request, ProductViewModel product)
        {
            if (ModelState.IsValid)
            {
                using (var context = new AWEntities())
                {
                    // Create a new Product entity and set its properties from the posted ProductViewModel.
                    var entity = new Product
                    {
                        ProductID = product.ProductId,
                        Name = product.ProductName,
                    };
                    // Attach the entity.
                    context.Product.Attach(entity);
                    // Delete the entity.
                    context.Product.Remove(entity);
                    // Or use DeleteObject if using a previous versoin of Entity Framework.
                    // northwind.Products.DeleteObject(entity);
                    // Delete the entity in the database.
                    context.SaveChanges();
                }
            }
            // Return the removed product. Also return any validation errors.
            return Json(new[] { product }.ToDataSourceResult(request, ModelState));
        }

    }
}