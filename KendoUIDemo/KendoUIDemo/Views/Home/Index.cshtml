

@(Html.Kendo().Grid((IEnumerable<KendoUIDemo.Models.Product>)ViewBag.Products) //Bind the grid to ViewBag.Products
        .Name("grid")
        .Columns(columns =>
        {
            //Create a column bound to the ProductID property.
            columns.Bound(product => product.ProductID);
            //Create a column bound to the ProductName property.
            columns.Bound(product => product.ProductName);
            //Create a column bound to the UnitsInStock property.
            columns.Bound(product => product.UnitsInStock);

            columns.Command(commands =>
            {
                commands.Edit(); // The "edit" command will edit and update data items
                commands.Destroy(); // The "destroy" command removes data items
            }).Title("Commands").Width(200);
        })
        .ToolBar(toolbar => toolbar.Create()) // The "create" command adds new data items
        .Editable(editable => editable.Mode(GridEditMode.InLine)) // Use inline editing mode
        .Pageable()
        .Sortable() // Enable sorting
        .Selectable()

            .Filterable(ftb => ftb.Mode(GridFilterMode.Row))

        .Scrollable(s => s.Height(600)) //Remove the default height.
        .DataSource(dataSource =>

            dataSource
                .Ajax() //Or .Server()
                .Model(model =>
                    {
                        model.Id(product => product.ProductID); // Specify the property which is the unique identifier of the model
                        model.Field(product => product.ProductID).Editable(false); // Make the ProductID property not editable
                        })
                .Create(create => create.Action("Products_Create", "Home")) // Action invoked when the user saves a new data item
                .Read(read => read.Action("Products_Read", "Home"))  // Action invoked when the grid needs data
                .Update(update => update.Action("Products_Update", "Home"))  // Action invoked when the user saves an updated data item
                .Destroy(destroy => destroy.Action("Products_Destroy", "Home")) // Action invoked when the user removes a data item
                .PageSize(10)

        )

      )

